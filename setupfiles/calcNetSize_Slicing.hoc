proc calcNetSize_Slicing() {local i, targetCircuit_length, pos_index localobj GidsVector, SlicesVector
					// Calculate the final network size (after any circuit slicing)
					//  The total number of cells 'ncell' is reduced to include only those neurons
					//    - targetCircuit_length: x-length of the target circuit to simulate
					//    - $1: SliceThickness: Thickness of the horizontal slice in microns (x-direction)
					//    - $2: Slices: desired number of slices along the x-direction
					//    - gid: index of the cell in the original whole network

	if (int(LongitudinalLength/$1) >= $2) { // Desired circuit length is similar or smaller than the available x-length
	   targetCircuit_length = $1*$2
	} else {                                // Desired circuit length is larger than the available x-length
	   targetCircuit_length = $1*int(LongitudinalLength/$1)
    }

	for i=0, numCellTypes-1 {			// For each cell type
        	GidsVector = new Vector()
	        SlicesVector = new Vector()

		for pos_index=cellType[i].cellStartGid, cellType[i].cellEndGid {
			xpos=get_x_pos(pos_index,cellType[i].cellStartGid,cellType[i].dentateXBins,cellType[i].dentateYBins*cellType[i].dentateZBins,cellType[i].dentateXBinSize)
			if (xpos > targetCircuit_length) {
				cellType[i].numCells -= 1
				if (cellType[i].numCells == 0) {
					cellType[i].numCells = 1
				}	// If all cells of one type are left out, let 1 included
			} else {
				GidsVector.append(pos_index)	// Keep the orginal gid value of that cell in the whole network,
												// for posterior positioning in the target circuit slices
				SlicesVector.append(int(xpos/$1))	// Slice where the cell will be located
			}
		}
		cellType[i].PosGidStart = cellType[i].cellStartGid
		cellType[i].PosGidList = new Vector()
		cellType[i].PosGidList.copy(GidsVector)	// After slicing, collects original cell Gids for this celltype,
												// the length of which equals the number of
												// cells left of this type in the model
		cellType[i].SliceIndList = new Vector()
		cellType[i].SliceIndList.copy(SlicesVector)

	}
}
calcNetSize_Slicing(SliceThickness, Slices)
