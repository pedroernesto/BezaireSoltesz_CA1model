proc calcNetSize_Slicing() {local i, max_number_slices, targetCircuit_length, gid localobj GidsVector, SlicesVector
					// Calculate the final network size (after any circuit slicing)
					//  The total number of cells 'ncell' is reduced to include only those neurons
					//    - targetCircuit_length: x-length of the target circuit to simulate
					//    - $1: SliceThickness: Thickness of the horizontal slice in microns (x-direction)
					//    - $2: Slices: desired number of slices along the x-direction
					//    - gid: index of the cell in the original whole network

	// Target circuit length with number of slices desired
	// might be larger than the available x-length
	if (int(LongitudinalLength/$1) > $2) {
		max_number_slices = $2
	} else {
		max_number_slices = int(LongitudinalLength/$1)
	}

	if (max_number_slices != 0) {
		targetCircuit_length = $1*max_number_slices		// x-length of the target circuit to simulate
	} else {
		targetCircuit_length = LongitudinalLength	// Desired length of just one slice is bigger than the available x-lengh
	}

	for i=0, numCellTypes-1 {			// For each cell type
		GidsVector = new Vector()
		SlicesVector = new Vector()
		for gid=cellType[i].cellStartGid, cellType[i].cellEndGid {

			xpos=get_x_pos(gid,cellType[i].cellStartGid,cellType[i].dentateXBins,cellType[i].dentateYBins*cellType[i].dentateZBins,cellType[i].dentateXBinSize)
			if (xpos > targetCircuit_length) {

				cellType[i].numCells -= 1
				if (cellType[i].numCells == 0) {
					cellType[i].numCells = 1
				}	// If all cells of one type are left out, let 1 included
			} else {
				GidsVector.append(gid)		// Keep the orginal gid value of that cell in the whole network,
											// for posterior positioning in the target circuit slices
				SlicesVector.append(int(xpos/$1))	// Slice where the cell will be placed
			}
		}
		cellType[i].PosGidList = new Vector()
		cellType[i].PosGidList.copy(GidsVector)	// After slicing, collects original cell Gids for this celltype,
												// the length of which equals the number of
												// cells left of this type in the model

		cellType[i].SliceIndList = new Vector()
		cellType[i].SliceIndList.copy(SlicesVector)
	}
}
calcNetSize_Slicing(SliceThickness, Slices)
