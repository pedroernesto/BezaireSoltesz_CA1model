/************************************************************
'ca1' model code repository
Written by Marianne Bezaire, marianne.bezaire@gmail.com, www.mariannebezaire.com
In the lab of Ivan Soltesz, www.ivansolteszlab.org
Published and latest versions of this code are available online at:
ModelDB:
Open Source Brain: http://www.opensourcebrain.org/projects/nc_ca1

Main code file: ../main.hoc

This file defines a procedure related to brief pulses (shots) of
electrical current.
************************************************************/

proc setCurrentShotAmplitude() {local idx, reli, typei, jgid, slice_idx, p_exp localobj cell, r
    // This procedure takes four arguments:
	//  $1 = x position of the stimulation point in microns
	//  $2 = y position of the stimulation point in microns
    //  $3 = The maximum distance in microns away from an electrode point, that cells may be located to get stimulated
    //  $4 = Slice where to place the intracellular electrode

	for idx=0, numCellTypes-1 {
    	if (strcmp(cellType[idx].cellType_string, "ca3cell")==0) {	// Find the gid range of the ca3cell cells
            break
        }
    }
	// If the cell type chosen above is artificial, set the random stream
	//  associated with the noise in its spike times
    r = new Random(RandomSeedsCell)
    r.uniform(0,1.0/$3)
    // For all the cells of this type, owned by this processor
    for pcitr(&reli, &typei, &jgid, cellType[idx].cellStartGid, cellType[idx].cellEndGid) {
        slice_idx = cellType[idx].SliceIndList.x[jgid-cellType[idx].cellStartGid]
        cell = pc.gid2cell(jgid)	// Create a reference to the artificial cell

		p_exp = 1.0/$3*exp(-sqrt((cell.x-$1)*(cell.x-$1) + (cell.y-$2)*(cell.y-$2))/$3)
        if ( slice_idx==$4 &&  r.repick() < p_exp ) {
            // Use class_cutsuridiscell.hoc (or other real neuron model) as NEURON template for ca3cells
            // DegreeStim must be given in [nA). Note that V is in [mV] and R in [MegaOhm].
            // So, I = V/R gives 10^(-3) V / 10^(6) Ohm ~ 10^(-9) A = 1 nA
            // DegreeStim should be given in [nA], but note that is in the range 60uA-270uA in Sasaki's experiment
            cell.insert_electrode(DegreeStim*1000, 0.050, OnSetStim)
			//print abs(cell.x-$1), SliceThickness/2, abs(cell.y-$2), TransverseLength/2, sqrt((cell.x-$1)*(cell.x-$1) + (cell.y-$2)*(cell.y-$2)), $3, p_exp, r_num
        }
    }
}

proc setCurrentShotSlices() { local targetCircuit_length, NumSlices, slice_idx
    // This procedure takes three arguments:
    //  $1: SliceThickness: Thickness of the horizontal slice in microns (x-direction)
    //  $2: Slices: desired number of slices along the x-direction

    if (int(LongitudinalLength/$1) >= $2) { // Desired circuit length is similar or smaller than the available x-length
    	targetCircuit_length = $1*$2
    } else {                                // Desired circuit length is larger than the available x-length
     	targetCircuit_length = $1*int(LongitudinalLength/$1)
    }
    NumSlices = int(targetCircuit_length/$1)

    for slice_idx=0, NumSlices-1 {
        setCurrentShotAmplitude( (slice_idx+0.5)*$1, TransverseLength/2, SliceThickness, slice_idx )
    }
}

if (MakeArtConns==1) {  // It is assumed that connections from artificial cells
                        // have been made at another time (ie, in the connectivity algorithm)
    setCurrentShotSlices(SliceThickness, Slices)
}
