/************************************************************
'ca1' model code repository
Written by Marianne Bezaire, marianne.bezaire@gmail.com, www.mariannebezaire.com
In the lab of Ivan Soltesz, www.ivansolteszlab.org
Published and latest versions of this code are available online at:
ModelDB:
Open Source Brain: http://www.opensourcebrain.org/projects/nc_ca1

Main code file: ../main.hoc

This file defines a procedure related to brief pulses (shots) of
electrical current.
setCurrentShotAmplitude: this procedure sets the properties of the random number
   generators that are then associated to the noise functionality of
   the artificial cells. Each artificial cell has its own, unique
   random stream that is associated to its noise algorithm. The noise
   algorithm then draws from that random number stream to determine
   the interspike intervals that define the spike train pattern of the cell.
   However, only a subset of artificial cells are kept active;
   the other cells will be silenced throughout the simulation.
************************************************************/

proc setCurrentShotAmplitude() {local targetCircuit_length, NumSlices, reli, typei, jgid, idx, rgid, SliceArtCellsActMax, slice_idx localobj cell, SliceArtCellsActCount, r
    // This procedure takes three arguments:
    //  $1: SliceThickness: Thickness of the horizontal slice in microns (x-direction)
    //  $2: Slices: desired number of slices along the x-direction
    //  $3 = Percent of artificial neurons to be kept active

    if (int(LongitudinalLength/$1) >= $2) { // Desired circuit length is similar or smaller than the available x-length
    	targetCircuit_length = $1*$2
    } else {                                // Desired circuit length is larger than the available x-length
     	targetCircuit_length = $1*int(LongitudinalLength/$1)
    }
    NumSlices = int(targetCircuit_length/$1)

	for idx=0, numCellTypes-1 {
    	if (strcmp(cellType[idx].cellType_string, "ca3cell")==0) {	// Find the gid range of the ca3cell cells
            break
        }
    }
	// If the cell type is artificial "ca3cell", set the random stream
	//  associated with the noise in its spike times
    SliceArtCellsActCount = new Vector(NumSlices,0)
    SliceArtCellsActMax=int(cellType[idx].numCells/NumSlices*($3/100))
    r = new Random(RandomSeedsCell)
    r.discunif(cellType[idx].cellStartGid, cellType[idx].cellEndGid)
    while ( SliceArtCellsActCount.sum() < NumSlices*SliceArtCellsActMax) {	// Ensure that all slices are equally activated
        rgid = r.repick()
        slice_idx = cellType[idx].SliceIndList.x[rgid-cellType[idx].cellStartGid]
        if (SliceArtCellsActCount.x[slice_idx] < SliceArtCellsActMax) {		// Check that in this slice activation is
																			// still lower than SliceArtCellsActMax
            for rank = 0, pc.nhost-1 {
                if (rank == pc.id) {				// Ensure that each processor runs once
                    // For all the artificial cells of this type, owned by this processor
                    for pcitr(&reli, &typei, &jgid, cellType[idx].cellStartGid, cellType[idx].cellEndGid) {
                        cell = pc.gid2cell(jgid)	// Create a reference to the artificial cell
                        if (pc.gid_exists(jgid) && jgid==rgid && cell.start==-1) {  // Ensure that the picked cell is not already activated
                            cell.start = OnSetStim      // Onset time in ms, for stimulation from artificial cells
                            // Use class_ppspont.hoc as NEURON template for ca3cells
                            cell.dur = 2.0             // Time duration in ms, for stimulation from artificial cells
                            ranstimlist.object(reli).r.negexp(1) 	// Using a negative exponential distribution to determine
                                                                    //  the interspike interval (ISI) gives Poisson-distributed
                                                                    //  spike times. Always use 1 as the argument; the interval
                                                                    //  for the netstim will set the 'rate' (or average ISI).
                                                                    //
                                                                    // For another example (which defines the randomstream class
                                                                    //  differently, and therefore calls different commands at
                                                                    //  different times) see the following file:
                                                                    // <http://senselab.med.yale.edu/modeldb/showmodel.asp?model=83319&file=\destexhe_benchmarks\NEURON\common\netstim.hoc>
                            cell.noiseFromRandom(ranstimlist.object(reli).r)	// Set this random stream as the random number
                                                                                //  generator for the noise functionality of
                                                                                //  the spike generator
                            SliceArtCellsActCount.x[slice_idx] += 1
							// SliceArtCellsActCount.printf()
                        }
                    }
                }
                pc.barrier()		// Make sure each processor waits its turn.
				SliceArtCellsActCount.x[slice_idx] = pc.allreduce(SliceArtCellsActCount.x[slice_idx],2)
            }
        }
    }
}

if (MakeArtConns==1) { 													// It is assumed that connections from artificial cells
	setCurrentShotAmplitude(SliceThickness, Slices, PercentArtActive) 	// have been made at another time (ie, in the connectivity algorithm)
}
